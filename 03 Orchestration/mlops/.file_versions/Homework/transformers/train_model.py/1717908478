import pandas as pd
from sklearn.feature_extraction import DictVectorizer
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def train_model(df, *args, **kwargs):
    """
    Train a linear regression model.
    
    Args:
        df (DataFrame): Input data frame.

    Returns:
        DictVectorizer, LinearRegression: Fitted dict vectorizer and trained model.
    """
    # Prepare the features and target variable
    features = df_transformed[['PULocationID', 'DOLocationID']].to_dict(orient='records')
    target = df_transformed['duration']
    
    # Fit the dict vectorizer
    dv = DictVectorizer()
    X = dv.fit_transform(features)
    
    # Train the linear regression model
    model = LinearRegression()
    model.fit(X, target)
    
    print(f"Model intercept: {model.intercept_}")
    
    return dv, model


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
    # Check the number of records
    assert len(output) > 0, 'The output has no records'


# Load, transform the data, train the model, and print the intercept
df_loaded = load_data()
df_transformed = transform_data(df_loaded)
dv, model = train_model(df_transformed)